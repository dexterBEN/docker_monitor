name: Deploy to Cloud Run

on:
  pull_request:
    branches: [ backend-release ]

jobs:
  build_image:
  
    name: Build Docker image (Flask-app) # name of the job

    runs-on: ubuntu-latest # This job will run on ubuntu virtual machin
    
    env:
      working-directory: ./backend

    steps:
      - name: checkout code
        uses: actions/checkout@v2 #checkout the repo

      - run: docker build -t flask_app .
        working-directory: ${{env.working-directory}}

      - name: Save Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: flask_app_artifact
          path: ${{ env.working-directory }}
          retention-days: 1

      # - name: login to dockerhub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # - run: docker tag flask_app dexter94/docker_monitor_api
      #   working-directory: ${{env.working-directory}}
    
      # - run: docker push dexter94/docker_monitor_api
      #   working-directory: ${{env.working-directory}}

  deploy_cloud:
    needs: build_image

    name: Deploy to Cloud Run
    
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      RUN_REGION: europe-west2
      SA_KEY_JSON: ${{ secrets.GCP_SA_KEY }}

    steps:
      - run: |
          sudo apt-get install python2.7
          export CLOUDSDK_PYTHON="usr/bin/python2"

        working-directory: ${{env.working-directory}}

      - name: checkout code
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: flask_app_artifact
          path: ${{ env.working-directory }}/docker-image-artifact

      - name: Authenticate to GCR
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
      
      - name: Load Docker image
        run: docker load -i ${{ env.working-directory }}/flask_app.tar

      - name: Tag Docker image
        run: docker tag flask_app gcr.io/${{ env.PROJECT_ID }}/docker_monitor_api

      - name: Push Docker image to GCR
        run: docker push gcr.io/${{ env.PROJECT_ID }}/docker_monitor_api

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy docker-monitor-api \
            --image gcr.io/${{ env.PROJECT_ID }}/docker_monitor_api \
            --platform managed \
            --region ${{ env.RUN_REGION }} \
            --allow-unauthenticated

      # - name: authenticate to GCLOUD
      #   uses: google-github-actions/auth@v1
      #   with:
      #     credentials_json: ${{ secrets.GCP_SA_KEY }}
      #     cleanup_credentials: false
      
      # - name: Set GCloud SDK
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     version: '>= 363.0.0'

      # - name: Set Project ID
      #   run: gcloud config set project ${{ secrets.GCP_PROJECT }}
      #   working-directory: ${{env.working-directory}}

      # - name: Setup gcloud CLI
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     # service_account_key: ${{ secrets.GCP_SA_KEY }}
      #     project_id: ${{ secrets.GCP_PROJECT }}

      # - name: TAG image to GCR
      #   run: docker tag dexter94/docker_monitor_api gcr.io/$PROJECT_ID/docker_monitor_api

      #   working-directory: ${{env.working-directory}}

      # - name: deploy to GCR
      #   run: docker push gcr.io/$PROJECT_ID/docker_monitor_api
      #   working-directory: ${{env.working-directory}}

    # steps:

    # - name: Setup gcloud CLI
    #   uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
    #   with:
    #     version: "290.0.1"
    #     service_account_key: ${{ secrets.GCP_SA_KEY }}
    #     project_id: ${{ secrets.GCP_PROJECT }}


    # - name: Deploy
    #   run: gcloud run deploy $PROJECT_ID --image gcr.io/$PROJECT_ID/$PROJECT_ID:$GITHUB_SHA --platform managed --region $RUN_REGION
