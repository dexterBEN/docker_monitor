name: Deploy to Cloud Run

on:
  pull_request:
    branches: [ backend-release ]

jobs:
  build_image:
  
    name: Build Docker image (Flask-app) # name of the job

    runs-on: ubuntu-latest # This job will run on ubuntu virtual machine
    
    env:
      working-directory: ./backend #TODO find why it's not workin

    steps:
      - name: checkout code
        uses: actions/checkout@v2 #checkout the repo

      - run: docker build -t flask_app .
        working-directory: ${{env.working-directory}}

      - name: login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - run: docker tag flask_app dexter94/docker_monitor_api
        working-directory: ${{env.working-directory}}
    
      # - run: docker push dexter94/docker_monitor_api
      #   working-directory: ${{env.working-directory}}

  deploy_cloud:
    needs: build_image

    name: Deploy to Cloud Run
    
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT }}
      RUN_REGION: europe-west2
      SA_KEY_JSON: ${{ secrets.GCP_SA_KEY }}

    steps:
      - run: docker ps -a

      - name: checkout code
        uses: actions/checkout@v2
      
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}

    # steps:

    # - name: Setup gcloud CLI
    #   uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
    #   with:
    #     version: "290.0.1"
    #     service_account_key: ${{ secrets.GCP_SA_KEY }}
    #     project_id: ${{ secrets.GCP_PROJECT }}

    # # Build and push image to Google Container Registry
    # - name: Build
    #   run: gcloud builds submit --tag gcr.io/$PROJECT_ID/$PROJECT_ID:$GITHUB_SHA

    # - name: Deploy
    #   run: gcloud run deploy $PROJECT_ID --image gcr.io/$PROJECT_ID/$PROJECT_ID:$GITHUB_SHA --platform managed --region $RUN_REGION
